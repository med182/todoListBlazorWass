@page "/todo"

@inject Blazored.LocalStorage.ILocalStorageService localStorageService
<h1>Liste des tâches (@todos.Count(todo => !todo.IsDone))</h1>

<div class="row">
    <div class="col-4">
        <ul class="list-group mb-5">
            @foreach (var todo in todos)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <input type="checkbox" class="form-check-input me-1" @bind="todo.IsDone" />
                    @todo.Title
                    <button class="btn btn-sm btn-primary" @onclick="() => selectedTodo = todo">Modifier</button>
                </li>
            }
        </ul>
        <form class="row row-cols-lg-auto g-3 align-items-center" action="">
            <div class="col-12">
                <input type="text" class="form-control form-control-sm mx-2" placeholder="Nouvelle tâche" @bind="newTodoTitle">
            </div>
            <div class="col-12">
                <button type="submit" class="btn btn-sm btn-primary" @onclick="AddTodoAsync" @onclick:preventDefault>Ajouter une tâche</button>
            </div>
        </form>
    </div>
    <div class="col-4">
        @if (selectedTodo != null)
        {
            <label>Title</label>
            <input type="text" class="form-control form-control-sm mb-2" @bind="selectedTodo.Title" />
            <button class="btn btn-sm btn-success" @onclick="SaveTodosAsync">Sauvegarder</button>
            <button class="btn btn-sm btn-danger" @onclick="DeleteTodoAsync">Supprimer</button>
        }
    </div>
</div>

@code {
    private List<TodoItem> todos = new();

    private TodoItem selectedTodo;

    private string newTodoTitle;

    private const string localStorageKey = "todoslist";

    private async Task AddTodoAsync()
    {
        if (!string.IsNullOrWhiteSpace(newTodoTitle))
        {
            todos.Add(new TodoItem
            {
                Id = Guid.NewGuid().ToString(),
                Title = newTodoTitle
            });
            await SaveTodosAsync();
            newTodoTitle = string.Empty;
        }
    }

    private async Task DeleteTodoAsync()
    {
        if (selectedTodo != null)
        {
            todos.Remove(selectedTodo);
            selectedTodo = null;
        }
        await SaveTodosAsync();
    }

    private async Task SaveTodosAsync()
    {
        await localStorageService.SetItemAsync(localStorageKey, todos);
       
        if(selectedTodo !=null)
        {
            selectedTodo=null;
        }
    }

    private async Task LoadTodosAsync()
    {
        todos = await localStorageService.GetItemAsync<List<TodoItem>>(localStorageKey) ?? new List<TodoItem>();
    }

    protected override async Task OnInitializedAsync()
    {
        var data = await GetTodosAsync();

        if(data !=null){
            todos =data;
        }
    }

    private async Task<List<TodoItem>> GetTodosAsync(){
        return await localStorageService.GetItemAsync<List<TodoItem>>(localStorageKey);
    }
}
